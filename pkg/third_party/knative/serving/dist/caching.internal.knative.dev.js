// generated by cdk8s
import { ApiObject } from 'cdk8s';
/**
 * Image is a Knative abstraction that encapsulates the interface by which Knative
components express a desire to have a particular image cached.
 *
 * @schema Image
 */
export class Image extends ApiObject {
    /**
     * Returns the apiVersion and kind for "Image"
     */
    static GVK = {
        apiVersion: 'caching.internal.knative.dev/v1alpha1',
        kind: 'Image',
    };
    /**
     * Renders a Kubernetes manifest for "Image".
     *
     * This can be used to inline resource manifests inside other objects (e.g. as templates).
     *
     * @param props initialization props
     */
    static manifest(props = {}) {
        return {
            ...Image.GVK,
            ...toJson_ImageProps(props),
        };
    }
    /**
     * Defines a "Image" API object
     * @param scope the scope in which to define this object
     * @param id a scope-local name for the object
     * @param props initialization props
     */
    constructor(scope, id, props = {}) {
        super(scope, id, {
            ...Image.GVK,
            ...props,
        });
    }
    /**
     * Renders the object to Kubernetes JSON.
     */
    toJson() {
        const resolved = super.toJson();
        return {
            ...Image.GVK,
            ...toJson_ImageProps(resolved),
        };
    }
}
/**
 * Converts an object of type 'ImageProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ImageProps(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'metadata': obj.metadata,
        'spec': toJson_ImageSpec(obj.spec),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'ImageSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ImageSpec(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'image': obj.image,
        'imagePullSecrets': obj.imagePullSecrets?.map(y => toJson_ImageSpecImagePullSecrets(y)),
        'serviceAccountName': obj.serviceAccountName,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'ImageSpecImagePullSecrets' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_ImageSpecImagePullSecrets(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
