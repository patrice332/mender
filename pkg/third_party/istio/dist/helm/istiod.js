// generated by cdk8s
import { Helm } from 'cdk8s';
import { Construct } from 'constructs';
export class Istiod extends Construct {
    constructor(scope, id, props = {}) {
        super(scope, id);
        let updatedProps = {};
        if (props.values) {
            const values = props.values;
            if (values) {
                const { additionalValues, ...valuesWithoutAdditionalValues } = values;
                updatedProps = {
                    ...props,
                    values: {
                        ...this.flattenAdditionalValues(valuesWithoutAdditionalValues),
                        ...additionalValues,
                    },
                };
            }
        }
        const finalProps = {
            chart: 'istiod',
            repo: 'https://istio-release.storage.googleapis.com/charts',
            version: '1.27.1',
            ...(Object.keys(updatedProps).length !== 0 ? updatedProps : props),
        };
        new Helm(this, 'Helm', finalProps);
    }
    flattenAdditionalValues(props) {
        for (let prop in props) {
            if (Array.isArray(props[prop])) {
                props[prop].map((item) => {
                    if (typeof item === 'object' && prop !== 'additionalValues') {
                        return this.flattenAdditionalValues(item);
                    }
                    return item;
                });
            }
            else if (typeof props[prop] === 'object' && prop !== 'additionalValues') {
                props[prop] = this.flattenAdditionalValues(props[prop]);
            }
        }
        const { additionalValues, ...valuesWithoutAdditionalValues } = props;
        return {
            ...valuesWithoutAdditionalValues,
            ...additionalValues,
        };
    }
}
