// generated by cdk8s
import { ApiObject } from 'cdk8s';
/**
 *
 *
 * @schema Telemetry
 */
export class Telemetry extends ApiObject {
    /**
     * Returns the apiVersion and kind for "Telemetry"
     */
    static GVK = {
        apiVersion: 'telemetry.istio.io/v1',
        kind: 'Telemetry',
    };
    /**
     * Renders a Kubernetes manifest for "Telemetry".
     *
     * This can be used to inline resource manifests inside other objects (e.g. as templates).
     *
     * @param props initialization props
     */
    static manifest(props = {}) {
        return {
            ...Telemetry.GVK,
            ...toJson_TelemetryProps(props),
        };
    }
    /**
     * Defines a "Telemetry" API object
     * @param scope the scope in which to define this object
     * @param id a scope-local name for the object
     * @param props initialization props
     */
    constructor(scope, id, props = {}) {
        super(scope, id, {
            ...Telemetry.GVK,
            ...props,
        });
    }
    /**
     * Renders the object to Kubernetes JSON.
     */
    toJson() {
        const resolved = super.toJson();
        return {
            ...Telemetry.GVK,
            ...toJson_TelemetryProps(resolved),
        };
    }
}
/**
 * Converts an object of type 'TelemetryProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryProps(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'metadata': obj.metadata,
        'spec': toJson_TelemetrySpec(obj.spec),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpec(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'accessLogging': obj.accessLogging?.map(y => toJson_TelemetrySpecAccessLogging(y)),
        'metrics': obj.metrics?.map(y => toJson_TelemetrySpecMetrics(y)),
        'selector': toJson_TelemetrySpecSelector(obj.selector),
        'targetRef': toJson_TelemetrySpecTargetRef(obj.targetRef),
        'targetRefs': obj.targetRefs?.map(y => toJson_TelemetrySpecTargetRefs(y)),
        'tracing': obj.tracing?.map(y => toJson_TelemetrySpecTracing(y)),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecAccessLogging' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecAccessLogging(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'disabled': obj.disabled,
        'filter': toJson_TelemetrySpecAccessLoggingFilter(obj.filter),
        'match': toJson_TelemetrySpecAccessLoggingMatch(obj.match),
        'providers': obj.providers?.map(y => toJson_TelemetrySpecAccessLoggingProviders(y)),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecMetrics' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecMetrics(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'overrides': obj.overrides?.map(y => toJson_TelemetrySpecMetricsOverrides(y)),
        'providers': obj.providers?.map(y => toJson_TelemetrySpecMetricsProviders(y)),
        'reportingInterval': obj.reportingInterval,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecSelector' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecSelector(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecTargetRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecTargetRef(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'group': obj.group,
        'kind': obj.kind,
        'name': obj.name,
        'namespace': obj.namespace,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecTargetRefs' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecTargetRefs(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'group': obj.group,
        'kind': obj.kind,
        'name': obj.name,
        'namespace': obj.namespace,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecTracing' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecTracing(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'customTags': ((obj.customTags) === undefined) ? undefined : (Object.entries(obj.customTags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_TelemetrySpecTracingCustomTags(i[1]) }), {})),
        'disableSpanReporting': obj.disableSpanReporting,
        'enableIstioTags': obj.enableIstioTags,
        'match': toJson_TelemetrySpecTracingMatch(obj.match),
        'providers': obj.providers?.map(y => toJson_TelemetrySpecTracingProviders(y)),
        'randomSamplingPercentage': obj.randomSamplingPercentage,
        'useRequestIdForTraceSampling': obj.useRequestIdForTraceSampling,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecAccessLoggingFilter' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecAccessLoggingFilter(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'expression': obj.expression,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecAccessLoggingMatch' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecAccessLoggingMatch(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'mode': obj.mode,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecAccessLoggingProviders' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecAccessLoggingProviders(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecMetricsOverrides' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecMetricsOverrides(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'disabled': obj.disabled,
        'match': toJson_TelemetrySpecMetricsOverridesMatch(obj.match),
        'tagOverrides': ((obj.tagOverrides) === undefined) ? undefined : (Object.entries(obj.tagOverrides).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_TelemetrySpecMetricsOverridesTagOverrides(i[1]) }), {})),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecMetricsProviders' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecMetricsProviders(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecTracingCustomTags' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecTracingCustomTags(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'environment': toJson_TelemetrySpecTracingCustomTagsEnvironment(obj.environment),
        'header': toJson_TelemetrySpecTracingCustomTagsHeader(obj.header),
        'literal': toJson_TelemetrySpecTracingCustomTagsLiteral(obj.literal),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecTracingMatch' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecTracingMatch(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'mode': obj.mode,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecTracingProviders' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecTracingProviders(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
/**
 * This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
 *
 * Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
 *
 * @schema TelemetrySpecAccessLoggingMatchMode
 */
export var TelemetrySpecAccessLoggingMatchMode;
(function (TelemetrySpecAccessLoggingMatchMode) {
    /** CLIENT_AND_SERVER */
    TelemetrySpecAccessLoggingMatchMode["CLIENT_UNDERSCORE_AND_UNDERSCORE_SERVER"] = "CLIENT_AND_SERVER";
    /** CLIENT */
    TelemetrySpecAccessLoggingMatchMode["CLIENT"] = "CLIENT";
    /** SERVER */
    TelemetrySpecAccessLoggingMatchMode["SERVER"] = "SERVER";
})(TelemetrySpecAccessLoggingMatchMode || (TelemetrySpecAccessLoggingMatchMode = {}));
/**
 * Converts an object of type 'TelemetrySpecMetricsOverridesMatch' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecMetricsOverridesMatch(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'customMetric': obj.customMetric,
        'metric': obj.metric,
        'mode': obj.mode,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecMetricsOverridesTagOverrides' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecMetricsOverridesTagOverrides(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'operation': obj.operation,
        'value': obj.value,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecTracingCustomTagsEnvironment' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecTracingCustomTagsEnvironment(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'defaultValue': obj.defaultValue,
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecTracingCustomTagsHeader' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecTracingCustomTagsHeader(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'defaultValue': obj.defaultValue,
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetrySpecTracingCustomTagsLiteral' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetrySpecTracingCustomTagsLiteral(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'value': obj.value,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
/**
 * This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
 *
 * Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
 *
 * @schema TelemetrySpecTracingMatchMode
 */
export var TelemetrySpecTracingMatchMode;
(function (TelemetrySpecTracingMatchMode) {
    /** CLIENT_AND_SERVER */
    TelemetrySpecTracingMatchMode["CLIENT_UNDERSCORE_AND_UNDERSCORE_SERVER"] = "CLIENT_AND_SERVER";
    /** CLIENT */
    TelemetrySpecTracingMatchMode["CLIENT"] = "CLIENT";
    /** SERVER */
    TelemetrySpecTracingMatchMode["SERVER"] = "SERVER";
})(TelemetrySpecTracingMatchMode || (TelemetrySpecTracingMatchMode = {}));
/**
 * One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
 *
 * Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
 *
 * @schema TelemetrySpecMetricsOverridesMatchMetric
 */
export var TelemetrySpecMetricsOverridesMatchMetric;
(function (TelemetrySpecMetricsOverridesMatchMetric) {
    /** ALL_METRICS */
    TelemetrySpecMetricsOverridesMatchMetric["ALL_UNDERSCORE_METRICS"] = "ALL_METRICS";
    /** REQUEST_COUNT */
    TelemetrySpecMetricsOverridesMatchMetric["REQUEST_UNDERSCORE_COUNT"] = "REQUEST_COUNT";
    /** REQUEST_DURATION */
    TelemetrySpecMetricsOverridesMatchMetric["REQUEST_UNDERSCORE_DURATION"] = "REQUEST_DURATION";
    /** REQUEST_SIZE */
    TelemetrySpecMetricsOverridesMatchMetric["REQUEST_UNDERSCORE_SIZE"] = "REQUEST_SIZE";
    /** RESPONSE_SIZE */
    TelemetrySpecMetricsOverridesMatchMetric["RESPONSE_UNDERSCORE_SIZE"] = "RESPONSE_SIZE";
    /** TCP_OPENED_CONNECTIONS */
    TelemetrySpecMetricsOverridesMatchMetric["TCP_UNDERSCORE_OPENED_UNDERSCORE_CONNECTIONS"] = "TCP_OPENED_CONNECTIONS";
    /** TCP_CLOSED_CONNECTIONS */
    TelemetrySpecMetricsOverridesMatchMetric["TCP_UNDERSCORE_CLOSED_UNDERSCORE_CONNECTIONS"] = "TCP_CLOSED_CONNECTIONS";
    /** TCP_SENT_BYTES */
    TelemetrySpecMetricsOverridesMatchMetric["TCP_UNDERSCORE_SENT_UNDERSCORE_BYTES"] = "TCP_SENT_BYTES";
    /** TCP_RECEIVED_BYTES */
    TelemetrySpecMetricsOverridesMatchMetric["TCP_UNDERSCORE_RECEIVED_UNDERSCORE_BYTES"] = "TCP_RECEIVED_BYTES";
    /** GRPC_REQUEST_MESSAGES */
    TelemetrySpecMetricsOverridesMatchMetric["GRPC_UNDERSCORE_REQUEST_UNDERSCORE_MESSAGES"] = "GRPC_REQUEST_MESSAGES";
    /** GRPC_RESPONSE_MESSAGES */
    TelemetrySpecMetricsOverridesMatchMetric["GRPC_UNDERSCORE_RESPONSE_UNDERSCORE_MESSAGES"] = "GRPC_RESPONSE_MESSAGES";
})(TelemetrySpecMetricsOverridesMatchMetric || (TelemetrySpecMetricsOverridesMatchMetric = {}));
/**
 * Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
 *
 * Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
 *
 * @schema TelemetrySpecMetricsOverridesMatchMode
 */
export var TelemetrySpecMetricsOverridesMatchMode;
(function (TelemetrySpecMetricsOverridesMatchMode) {
    /** CLIENT_AND_SERVER */
    TelemetrySpecMetricsOverridesMatchMode["CLIENT_UNDERSCORE_AND_UNDERSCORE_SERVER"] = "CLIENT_AND_SERVER";
    /** CLIENT */
    TelemetrySpecMetricsOverridesMatchMode["CLIENT"] = "CLIENT";
    /** SERVER */
    TelemetrySpecMetricsOverridesMatchMode["SERVER"] = "SERVER";
})(TelemetrySpecMetricsOverridesMatchMode || (TelemetrySpecMetricsOverridesMatchMode = {}));
/**
 * Operation controls whether or not to update/add a tag, or to remove it.
 *
 * Valid Options: UPSERT, REMOVE
 *
 * @schema TelemetrySpecMetricsOverridesTagOverridesOperation
 */
export var TelemetrySpecMetricsOverridesTagOverridesOperation;
(function (TelemetrySpecMetricsOverridesTagOverridesOperation) {
    /** UPSERT */
    TelemetrySpecMetricsOverridesTagOverridesOperation["UPSERT"] = "UPSERT";
    /** REMOVE */
    TelemetrySpecMetricsOverridesTagOverridesOperation["REMOVE"] = "REMOVE";
})(TelemetrySpecMetricsOverridesTagOverridesOperation || (TelemetrySpecMetricsOverridesTagOverridesOperation = {}));
/**
 *
 *
 * @schema TelemetryV1Alpha1
 */
export class TelemetryV1Alpha1 extends ApiObject {
    /**
     * Returns the apiVersion and kind for "TelemetryV1Alpha1"
     */
    static GVK = {
        apiVersion: 'telemetry.istio.io/v1alpha1',
        kind: 'Telemetry',
    };
    /**
     * Renders a Kubernetes manifest for "TelemetryV1Alpha1".
     *
     * This can be used to inline resource manifests inside other objects (e.g. as templates).
     *
     * @param props initialization props
     */
    static manifest(props = {}) {
        return {
            ...TelemetryV1Alpha1.GVK,
            ...toJson_TelemetryV1Alpha1Props(props),
        };
    }
    /**
     * Defines a "TelemetryV1Alpha1" API object
     * @param scope the scope in which to define this object
     * @param id a scope-local name for the object
     * @param props initialization props
     */
    constructor(scope, id, props = {}) {
        super(scope, id, {
            ...TelemetryV1Alpha1.GVK,
            ...props,
        });
    }
    /**
     * Renders the object to Kubernetes JSON.
     */
    toJson() {
        const resolved = super.toJson();
        return {
            ...TelemetryV1Alpha1.GVK,
            ...toJson_TelemetryV1Alpha1Props(resolved),
        };
    }
}
/**
 * Converts an object of type 'TelemetryV1Alpha1Props' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1Props(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'metadata': obj.metadata,
        'spec': toJson_TelemetryV1Alpha1Spec(obj.spec),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1Spec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1Spec(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'accessLogging': obj.accessLogging?.map(y => toJson_TelemetryV1Alpha1SpecAccessLogging(y)),
        'metrics': obj.metrics?.map(y => toJson_TelemetryV1Alpha1SpecMetrics(y)),
        'selector': toJson_TelemetryV1Alpha1SpecSelector(obj.selector),
        'targetRef': toJson_TelemetryV1Alpha1SpecTargetRef(obj.targetRef),
        'targetRefs': obj.targetRefs?.map(y => toJson_TelemetryV1Alpha1SpecTargetRefs(y)),
        'tracing': obj.tracing?.map(y => toJson_TelemetryV1Alpha1SpecTracing(y)),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecAccessLogging' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecAccessLogging(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'disabled': obj.disabled,
        'filter': toJson_TelemetryV1Alpha1SpecAccessLoggingFilter(obj.filter),
        'match': toJson_TelemetryV1Alpha1SpecAccessLoggingMatch(obj.match),
        'providers': obj.providers?.map(y => toJson_TelemetryV1Alpha1SpecAccessLoggingProviders(y)),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecMetrics' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecMetrics(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'overrides': obj.overrides?.map(y => toJson_TelemetryV1Alpha1SpecMetricsOverrides(y)),
        'providers': obj.providers?.map(y => toJson_TelemetryV1Alpha1SpecMetricsProviders(y)),
        'reportingInterval': obj.reportingInterval,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecSelector' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecSelector(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecTargetRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecTargetRef(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'group': obj.group,
        'kind': obj.kind,
        'name': obj.name,
        'namespace': obj.namespace,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecTargetRefs' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecTargetRefs(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'group': obj.group,
        'kind': obj.kind,
        'name': obj.name,
        'namespace': obj.namespace,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecTracing' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecTracing(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'customTags': ((obj.customTags) === undefined) ? undefined : (Object.entries(obj.customTags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_TelemetryV1Alpha1SpecTracingCustomTags(i[1]) }), {})),
        'disableSpanReporting': obj.disableSpanReporting,
        'enableIstioTags': obj.enableIstioTags,
        'match': toJson_TelemetryV1Alpha1SpecTracingMatch(obj.match),
        'providers': obj.providers?.map(y => toJson_TelemetryV1Alpha1SpecTracingProviders(y)),
        'randomSamplingPercentage': obj.randomSamplingPercentage,
        'useRequestIdForTraceSampling': obj.useRequestIdForTraceSampling,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecAccessLoggingFilter' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecAccessLoggingFilter(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'expression': obj.expression,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecAccessLoggingMatch' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecAccessLoggingMatch(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'mode': obj.mode,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecAccessLoggingProviders' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecAccessLoggingProviders(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecMetricsOverrides' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecMetricsOverrides(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'disabled': obj.disabled,
        'match': toJson_TelemetryV1Alpha1SpecMetricsOverridesMatch(obj.match),
        'tagOverrides': ((obj.tagOverrides) === undefined) ? undefined : (Object.entries(obj.tagOverrides).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_TelemetryV1Alpha1SpecMetricsOverridesTagOverrides(i[1]) }), {})),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecMetricsProviders' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecMetricsProviders(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecTracingCustomTags' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecTracingCustomTags(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'environment': toJson_TelemetryV1Alpha1SpecTracingCustomTagsEnvironment(obj.environment),
        'header': toJson_TelemetryV1Alpha1SpecTracingCustomTagsHeader(obj.header),
        'literal': toJson_TelemetryV1Alpha1SpecTracingCustomTagsLiteral(obj.literal),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecTracingMatch' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecTracingMatch(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'mode': obj.mode,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecTracingProviders' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecTracingProviders(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
/**
 * This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
 *
 * Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
 *
 * @schema TelemetryV1Alpha1SpecAccessLoggingMatchMode
 */
export var TelemetryV1Alpha1SpecAccessLoggingMatchMode;
(function (TelemetryV1Alpha1SpecAccessLoggingMatchMode) {
    /** CLIENT_AND_SERVER */
    TelemetryV1Alpha1SpecAccessLoggingMatchMode["CLIENT_UNDERSCORE_AND_UNDERSCORE_SERVER"] = "CLIENT_AND_SERVER";
    /** CLIENT */
    TelemetryV1Alpha1SpecAccessLoggingMatchMode["CLIENT"] = "CLIENT";
    /** SERVER */
    TelemetryV1Alpha1SpecAccessLoggingMatchMode["SERVER"] = "SERVER";
})(TelemetryV1Alpha1SpecAccessLoggingMatchMode || (TelemetryV1Alpha1SpecAccessLoggingMatchMode = {}));
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecMetricsOverridesMatch' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecMetricsOverridesMatch(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'customMetric': obj.customMetric,
        'metric': obj.metric,
        'mode': obj.mode,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecMetricsOverridesTagOverrides' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecMetricsOverridesTagOverrides(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'operation': obj.operation,
        'value': obj.value,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecTracingCustomTagsEnvironment' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecTracingCustomTagsEnvironment(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'defaultValue': obj.defaultValue,
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecTracingCustomTagsHeader' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecTracingCustomTagsHeader(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'defaultValue': obj.defaultValue,
        'name': obj.name,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'TelemetryV1Alpha1SpecTracingCustomTagsLiteral' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_TelemetryV1Alpha1SpecTracingCustomTagsLiteral(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'value': obj.value,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
/**
 * This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
 *
 * Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
 *
 * @schema TelemetryV1Alpha1SpecTracingMatchMode
 */
export var TelemetryV1Alpha1SpecTracingMatchMode;
(function (TelemetryV1Alpha1SpecTracingMatchMode) {
    /** CLIENT_AND_SERVER */
    TelemetryV1Alpha1SpecTracingMatchMode["CLIENT_UNDERSCORE_AND_UNDERSCORE_SERVER"] = "CLIENT_AND_SERVER";
    /** CLIENT */
    TelemetryV1Alpha1SpecTracingMatchMode["CLIENT"] = "CLIENT";
    /** SERVER */
    TelemetryV1Alpha1SpecTracingMatchMode["SERVER"] = "SERVER";
})(TelemetryV1Alpha1SpecTracingMatchMode || (TelemetryV1Alpha1SpecTracingMatchMode = {}));
/**
 * One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
 *
 * Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
 *
 * @schema TelemetryV1Alpha1SpecMetricsOverridesMatchMetric
 */
export var TelemetryV1Alpha1SpecMetricsOverridesMatchMetric;
(function (TelemetryV1Alpha1SpecMetricsOverridesMatchMetric) {
    /** ALL_METRICS */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["ALL_UNDERSCORE_METRICS"] = "ALL_METRICS";
    /** REQUEST_COUNT */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["REQUEST_UNDERSCORE_COUNT"] = "REQUEST_COUNT";
    /** REQUEST_DURATION */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["REQUEST_UNDERSCORE_DURATION"] = "REQUEST_DURATION";
    /** REQUEST_SIZE */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["REQUEST_UNDERSCORE_SIZE"] = "REQUEST_SIZE";
    /** RESPONSE_SIZE */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["RESPONSE_UNDERSCORE_SIZE"] = "RESPONSE_SIZE";
    /** TCP_OPENED_CONNECTIONS */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["TCP_UNDERSCORE_OPENED_UNDERSCORE_CONNECTIONS"] = "TCP_OPENED_CONNECTIONS";
    /** TCP_CLOSED_CONNECTIONS */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["TCP_UNDERSCORE_CLOSED_UNDERSCORE_CONNECTIONS"] = "TCP_CLOSED_CONNECTIONS";
    /** TCP_SENT_BYTES */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["TCP_UNDERSCORE_SENT_UNDERSCORE_BYTES"] = "TCP_SENT_BYTES";
    /** TCP_RECEIVED_BYTES */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["TCP_UNDERSCORE_RECEIVED_UNDERSCORE_BYTES"] = "TCP_RECEIVED_BYTES";
    /** GRPC_REQUEST_MESSAGES */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["GRPC_UNDERSCORE_REQUEST_UNDERSCORE_MESSAGES"] = "GRPC_REQUEST_MESSAGES";
    /** GRPC_RESPONSE_MESSAGES */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMetric["GRPC_UNDERSCORE_RESPONSE_UNDERSCORE_MESSAGES"] = "GRPC_RESPONSE_MESSAGES";
})(TelemetryV1Alpha1SpecMetricsOverridesMatchMetric || (TelemetryV1Alpha1SpecMetricsOverridesMatchMetric = {}));
/**
 * Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
 *
 * Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
 *
 * @schema TelemetryV1Alpha1SpecMetricsOverridesMatchMode
 */
export var TelemetryV1Alpha1SpecMetricsOverridesMatchMode;
(function (TelemetryV1Alpha1SpecMetricsOverridesMatchMode) {
    /** CLIENT_AND_SERVER */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMode["CLIENT_UNDERSCORE_AND_UNDERSCORE_SERVER"] = "CLIENT_AND_SERVER";
    /** CLIENT */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMode["CLIENT"] = "CLIENT";
    /** SERVER */
    TelemetryV1Alpha1SpecMetricsOverridesMatchMode["SERVER"] = "SERVER";
})(TelemetryV1Alpha1SpecMetricsOverridesMatchMode || (TelemetryV1Alpha1SpecMetricsOverridesMatchMode = {}));
/**
 * Operation controls whether or not to update/add a tag, or to remove it.
 *
 * Valid Options: UPSERT, REMOVE
 *
 * @schema TelemetryV1Alpha1SpecMetricsOverridesTagOverridesOperation
 */
export var TelemetryV1Alpha1SpecMetricsOverridesTagOverridesOperation;
(function (TelemetryV1Alpha1SpecMetricsOverridesTagOverridesOperation) {
    /** UPSERT */
    TelemetryV1Alpha1SpecMetricsOverridesTagOverridesOperation["UPSERT"] = "UPSERT";
    /** REMOVE */
    TelemetryV1Alpha1SpecMetricsOverridesTagOverridesOperation["REMOVE"] = "REMOVE";
})(TelemetryV1Alpha1SpecMetricsOverridesTagOverridesOperation || (TelemetryV1Alpha1SpecMetricsOverridesTagOverridesOperation = {}));
